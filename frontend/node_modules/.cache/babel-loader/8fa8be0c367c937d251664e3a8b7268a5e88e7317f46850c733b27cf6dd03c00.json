{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\spyne project\\\\frontend\\\\src\\\\components\\\\CarList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const CarList = () => {\n//   const [cars, setCars] = useState([]); // Store fetched cars\n//   const [error, setError] = useState(null); // For handling errors\n\n//   // Function to fetch cars from the backend\n//   const fetchCars = async () => {\n//     try {\n//       const token = localStorage.getItem('token'); // Get token from localStorage or session\n//       const response = await axios.get('http://localhost:5000/api/cars', {\n//         headers: {\n//           'Authorization': `Bearer ${token}`, // Pass token in header\n//         },\n//       });\n//       setCars(response.data); // Update the state with the fetched cars\n//     } catch (err) {\n//       setError('Failed to fetch cars'); // Handle error if the request fails\n//     }\n//   };\n\n//   // Use useEffect to fetch cars on component mount\n//   useEffect(() => {\n//     fetchCars();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Car List</h1>\n//       {error && <p>{error}</p>} {/* Display error message */}\n//       <ul>\n//         {cars.length === 0 ? (\n//           <p>No cars available</p>\n//         ) : (\n//           cars.map((car) => (\n//             <li key={car._id}>\n//               <h3>{car.title}</h3>\n//               <p>{car.description}</p>\n//               <img src={car.images[0]} alt={car.title} width=\"200\" />\n//               {/* Show more car details as needed */}\n//             </li>\n//           ))\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default CarList;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CarList = () => {\n  _s();\n  const [cars, setCars] = useState([]); // Store fetched cars\n  const [error, setError] = useState(null); // For handling errors\n  const [searchQuery, setSearchQuery] = useState(''); // For search input\n\n  // Function to fetch cars from the backend with or without a search query\n  const fetchCars = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Get token from localStorage or session\n      const response = await axios.get(`http://localhost:5000/api/cars${searchQuery ? `?q=${searchQuery}` : ''}`, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Pass token in header\n        }\n      });\n      setCars(response.data); // Update the state with the fetched cars\n    } catch (err) {\n      setError('Failed to fetch cars'); // Handle error if the request fails\n    }\n  };\n\n  // Use useEffect to fetch cars on component mount or when search query changes\n  useEffect(() => {\n    fetchCars();\n  }, [searchQuery]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Car List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search cars by title, description, or tags\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value) // Update search query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cars.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No cars available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : cars.map(car => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: car.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: car.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: car.images[0],\n          alt: car.title,\n          width: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, car._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(CarList, \"rYGBtKdQKRuUrIWJ+/twqjVR0u0=\");\n_c = CarList;\nexport default CarList;\nvar _c;\n$RefreshReg$(_c, \"CarList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","CarList","_s","cars","setCars","error","setError","searchQuery","setSearchQuery","fetchCars","token","localStorage","getItem","response","get","headers","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","length","map","car","title","description","src","images","alt","width","_id","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/spyne project/frontend/src/components/CarList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const CarList = () => {\r\n//   const [cars, setCars] = useState([]); // Store fetched cars\r\n//   const [error, setError] = useState(null); // For handling errors\r\n\r\n//   // Function to fetch cars from the backend\r\n//   const fetchCars = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem('token'); // Get token from localStorage or session\r\n//       const response = await axios.get('http://localhost:5000/api/cars', {\r\n//         headers: {\r\n//           'Authorization': `Bearer ${token}`, // Pass token in header\r\n//         },\r\n//       });\r\n//       setCars(response.data); // Update the state with the fetched cars\r\n//     } catch (err) {\r\n//       setError('Failed to fetch cars'); // Handle error if the request fails\r\n//     }\r\n//   };\r\n\r\n//   // Use useEffect to fetch cars on component mount\r\n//   useEffect(() => {\r\n//     fetchCars();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Car List</h1>\r\n//       {error && <p>{error}</p>} {/* Display error message */}\r\n//       <ul>\r\n//         {cars.length === 0 ? (\r\n//           <p>No cars available</p>\r\n//         ) : (\r\n//           cars.map((car) => (\r\n//             <li key={car._id}>\r\n//               <h3>{car.title}</h3>\r\n//               <p>{car.description}</p>\r\n//               <img src={car.images[0]} alt={car.title} width=\"200\" />\r\n//               {/* Show more car details as needed */}\r\n//             </li>\r\n//           ))\r\n//         )}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CarList;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CarList = () => {\r\n  const [cars, setCars] = useState([]); // Store fetched cars\r\n  const [error, setError] = useState(null); // For handling errors\r\n  const [searchQuery, setSearchQuery] = useState(''); // For search input\r\n\r\n  // Function to fetch cars from the backend with or without a search query\r\n  const fetchCars = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token'); // Get token from localStorage or session\r\n      const response = await axios.get(`http://localhost:5000/api/cars${searchQuery ? `?q=${searchQuery}` : ''}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`, // Pass token in header\r\n        },\r\n      });\r\n      setCars(response.data); // Update the state with the fetched cars\r\n    } catch (err) {\r\n      setError('Failed to fetch cars'); // Handle error if the request fails\r\n    }\r\n  };\r\n\r\n  // Use useEffect to fetch cars on component mount or when search query changes\r\n  useEffect(() => {\r\n    fetchCars();\r\n  }, [searchQuery]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Car List</h1>\r\n      \r\n      {/* Search bar for filtering cars */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search cars by title, description, or tags\"\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)} // Update search query\r\n      />\r\n      \r\n      {error && <p>{error}</p>} {/* Display error message */}\r\n      \r\n      <ul>\r\n        {cars.length === 0 ? (\r\n          <p>No cars available</p>\r\n        ) : (\r\n          cars.map((car) => (\r\n            <li key={car._id}>\r\n              <h3>{car.title}</h3>\r\n              <p>{car.description}</p>\r\n              <img src={car.images[0]} alt={car.title} width=\"200\" />\r\n              {/* Show more car details as needed */}\r\n            </li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CarList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}